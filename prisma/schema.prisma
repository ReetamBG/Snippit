// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  // for identifying a user
  id String @id @default(uuid())
  email String @unique
  username String @unique
  clerkId String @unique

  // For the profile section
  name String?
  bio String?
  profilePicture String?
  location String?
  website String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt  

  // relations
  posts Post[]
  comments Comment[]
  likes Like[]
  followers Follow[] @relation("user-following")
  following Follow[] @relation("user-followers")
  notificationsReceived Notification[] @relation("user-notification-receiver")
  notificationsSent Notification[] @relation("user-notification-sender")

}

model Post {
  id String @id @default(uuid())
  content String?
  image String?
  authorId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relations
  comments Comment[]
  likes Like[]
  notifications Notification[]
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)  
}

model Comment{
  id String @id @default(uuid())
  content String
  authorId String // the one who comments
  postId String // the post on which commented
  createdAt DateTime @default(now())

  // relations
  notifications Notification[]
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Like {
  authorId String
  postId String
  createdAt DateTime @default(now())

  @@id([authorId, postId]) // one like per user per post

  // relations 
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Follow {
  followerId String // the one who is following
  followingId String  // the one who is getting followed
  createdAt DateTime @default(now())
  
  @@id([followerId, followingId]) // all follows must be unique 
  
  follower User @relation("user-followers", fields: [followerId], references: [id], onDelete: Cascade) 
  following User @relation("user-following", fields: [followingId], references: [id], onDelete: Cascade)
}

model Notification {
  id String @id @default(uuid())
  receiverId String  // the one who recieves the notifications
  senderId String // the one due to which notif is created (such as if the user likes or follows)
  type NotificationType
  postId String?
  commentId String?
  read Boolean @default(false)
  createdAt DateTime @default(now())

  // relations
  receiver User @relation("user-notification-receiver", fields: [receiverId], references: [id], onDelete: Cascade)
  sender User @relation("user-notification-sender", fields: [senderId], references: [id], onDelete: Cascade)
  post Post? @relation(fields: [postId], references: [id])
  comment Comment? @relation(fields: [commentId], references: [id])
}

enum NotificationType {
  LIKE
  COMMENT 
  FOLLOW
}
